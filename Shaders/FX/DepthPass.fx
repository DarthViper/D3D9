//////////////////////////////////////////////////////////////////////////////////////////
// Simple Depth Pass Shader
//////////////////////////////////////////////////////////////////////////////////////////
float4x4 	matWorldView;
float4x4 	matWorldViewProjection;

//////////////////////////////////////////////////////////////////////////////////////////
// Structres
//////////////////////////////////////////////////////////////////////////////////////////
struct VS_INPUT
{
	float4 Position : POSITION;
	float3 Normal	: NORMAL;
	float2 Tex		: TEXCOORD0;
};

struct VS_OUTPUT
{
	float4 Pos		: POSITION;
	float  depth	: TEXCOORD0;
};
//////////////////////////////////////////////////////////////////////////////////////////
// Vertex Shader
//////////////////////////////////////////////////////////////////////////////////////////
VS_OUTPUT VS_DEPTH(VS_INPUT In)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;

	Out.Pos = mul(In.Position, matWorldViewProjection);

	float depth = mul(In.Position, matWorldView).z;
	Out.depth = depth; // / 10000.0f);

	return Out;
}

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
//////////////////////////////////////////////////////////////////////////////////////////
float4 PS_DEPTH(VS_OUTPUT In) : COLOR0
{
	float zMax = 2000.0f;
	float depth  = In.depth / zMax;

	return float4(depth, depth, depth, 1.0f); // Depth & Normal Information
}

//////////////////////////////////////////////////////////////////////////////////////////
// Shader Technique
//////////////////////////////////////////////////////////////////////////////////////////
technique DepthPass
{
	pass p0
    {
        VertexShader = compile vs_3_0 VS_DEPTH();
        PixelShader = compile ps_3_0 PS_DEPTH();
    }
}